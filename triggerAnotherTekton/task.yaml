apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: trigger-another
spec:
  inputs:
    params:
      - name: another-pipeline-id
        description: the pipeline Id of another tekton pipeline to trigger
      - name: manual-trigger
        description: manual trigger name of another tekton pipeline
      - name: repository
        description: the git repository url that we interested in123
      - name: toolchain-id
  stepTemplate:
    env:
      - name: API
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: API
      - name: REGION
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: REGION
      - name: TOOLCHAIN
        valueFrom:
          configMapKeyRef:
            name: toolchain
            key: toolchain.json
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
      - name: MYTOOLCHAIN
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: MYTOOLCHAIN
  steps:
    - name: play-with-envs
      image: ibmcom/pipeline-base-image
      command: ["/bin/sh", "-c"]
      env:
        - name: UID
          valueFrom:
            configMapKeyRef:
              name: cd-config
              key: UID
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: RUN_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: TOOLCHAIN_ID
          value: $(inputs.params.toolchain-id)
      args:
        - |
          echo "UID is ${UID}"
          echo "BUILD_NUMBER is ${BUILD_NUMBER}"
          echo "RUN_ID is ${RUN_ID}"
          echo 'secured toolchain-id is ${TOOLCHAIN_ID}'
    - name: get-toolchain-old-way
      image: ibmcom/pipeline-base-image
      env:
        - name: REPOSITORY
          value: $(inputs.params.repository)
        - name: TOOLCHAIN_ID
          value: $(inputs.params.toolchain-id)
      command: ["/bin/sh", "-c"]
      args:
        - |
          echo "Testing env passing $PASSING_ENV"
          ibmcloud login -a $API -r $REGION --apikey $API_KEY ;
          TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r .iam_token)
          curl -s -X GET -o _toolchain.json -H "Accept: application/json" -H "Authorization: ${TOKEN}" "https://console.cloud.ibm.com/devops/toolchains/$TOOLCHAIN_ID?env_id=ibm:yp:us-south"
          if jq '.services' _toolchain.json > /dev/null 2>&1; then
            echo "Found toolchain with id $TOOLCHAIN_ID in region $REGION"
            cat _toolchain.json
          else
            echo "Toolchain with id $TOOLCHAIN_ID in region $REGION not found"
            exit 1
          fi
          cat _toolchain.json | jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.token_url'
    - name: toolchain-object-from-volume
      image: ibmcom/pipeline-base-image
      env:
        - name: REPOSITORY
          value: $(inputs.params.repository)
      command: ["/bin/sh", "-c"]
      args:
        - |
          cd /toolchain
          ls
          pwd
          cat toolchain.json
          printf "\n"
          cat toolchain.json | jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.token_url'
      volumeMounts:
        - mountPath: /toolchain
          name: toolchain-volume
    - name: play-with-toolchain-object
      image: ibmcom/pipeline-base-image
      env:
        - name: REPOSITORY
          value: $(inputs.params.repository)
      command: ["/bin/sh", "-c"]
      args:
        - |
          echo "for TOOLCHAIN"
          echo ${TOOLCHAIN} | jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.token_url'
    - name: play-with-toolchain-object-for-fun
      image: ibmcom/pipeline-base-image
      env:
        - name: REPOSITORY
          value: $(inputs.params.repository)
      command: ["/bin/bash", "-c"]
      args:
        - |
          echo "for MYTOOLCHAIN"
          echo "REPOSITORY is ${REPOSITORY}"
          echo ${MYTOOLCHAIN//$'\\n'}  | jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.token_url'
    - name: trigger-another-tekton-pipeline
      image: ibmcom/pipeline-base-image
      env:
        - name: ANOTHER_PIPELINE_ID
          value: $(inputs.params.another-pipeline-id)
        - name: MANUAL_TRIGGER_NAME
          value: $(inputs.params.manual-trigger)
        - name: REPOSITORY
          value: $(inputs.params.repository)
      command: ["/bin/sh", "-c"]
      args:
        - |
          # ibmcloud login -a $API -r $REGION --apikey $API_KEY ;
          # TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r .iam_token)
          # curl -X POST \
            "https://devops-api.${REGION}.devops.cloud.ibm.com/v1/tekton-pipelines/${ANOTHER_PIPELINE_ID}/runs"\
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "Authorization: ${TOKEN}" \
            -d "{\"eventListener\":\"${MANUAL_TRIGGER_NAME}\"}"
  volumes:
    - name: toolchain-volume
      configMap:
        # Provide the name of the ConfigMap containing the files you want
        # to add to the container
        name: toolchain