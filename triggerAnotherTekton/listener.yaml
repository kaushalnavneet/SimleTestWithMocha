apiVersion: tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: template
spec:
  params:
    - name: another-pipeline-id
      description: the pipeline Id of another tekton pipeline to trigger
    - name: manual-trigger
      description: manual trigger name of another tekton pipeline
    - name: apikey
      description: the ibmcloud api key
    - name: api
      description: the ibmcloud api endpoint
      default: "https://cloud.ibm.com"
    - name: region
      description: the ibmcloud login region
      default: "us-south"
    - name: repository
      default: "https://github.com/SidneyJiang/SimleTestWithMocha.git"
    - name: toolchain-id
      description: the toolchain id
    - name: myzzz
  resourcetemplates:
  # CD context defined as a configmap because it is immutable information
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: cd-config
      data:
        API: $(params.api)
        REGION: $(params.region)
        UID: $(uid)
        MYTOOLCHAIN: |
          {"toolchain_guid":"fc8f4949-5fba-41d4-a3fb-1eff51d396ab","name":"thinkdemo-akmebank-infrastructure","description":"schematics-akmebank-infrastructure","key":"schematics-akmebank-infrastructure_fa4b93b183af4f3fbcdb6ee6c572d459_us-south","container":{"guid":"fa4b93b183af4f3fbcdb6ee6c572d459","type":"resource_group_id"},"crn":"crn:v1:bluemix:public:toolchain:us-south:a/45461f09ff9b465290b084bf7629e6e1:fc8f4949-5fba-41d4-a3fb-1eff51d396ab::","created":"2020-03-21T18:50:40.687Z","updated_at":"2020-03-21T18:52:30.267Z","creator":"IBMid-100000KRAY","generator":"otc_setup","template":{"services_total":3,"name":"Schematics Infrastructure as Code Toolchain","type":"template","url":"https://github.com/open-toolchain/schematics-toolchain","source":"repo","locale":"en-US"},"tags":[],"lifecycle_messaging_webhook_id":"070d6b2d738e9b5fd4d215dc4d80c831","region_id":"ibm:yp:us-south","services":[{"broker_id":"12345678-9123-4567-8912-345678012githubintegrated","service_id":"github_integrated","container":{"guid":"fa4b93b183af4f3fbcdb6ee6c572d459","type":"resource_group_id"},"updated_at":"2020-03-21T19:21:48.547Z","parameters":{"extra_capabilities":[{"capability_id":"git.issues","display_name":"Issues","dashboard_url":"https://github.ibm.com/hrl-cicd-security/terraform-tekton/issues","label":"terraform-tekton","tags":["think","code"],"enabled":false,"readme":false}],"label":"terraform-tekton","type":"link","legal":true,"owner_id":"hrl-cicd-security","repo_name":"terraform-tekton","repo_url":"https://github.ibm.com/hrl-cicd-security/terraform-tekton.git","source_repo_url":"","private_repo":false,"has_issues":false,"enable_traceability":false,"integration_owner":"IBMid-100000KRAY","git_id":"integrated","api_root_url":"https://github.ibm.com/api","token_url":"https://otc-github-consolidated-broker.us-south.devops.cloud.ibm.com/github/token?git_id=integrated"},"status":{"state":"configured"},"dashboard_url":"https://github.ibm.com/hrl-cicd-security/terraform-tekton","region_id":"ibm:yp:us-south","instance_id":"553ac034-9ab6-4300-b596-cc3171e09c24","description":"Internal GitHub Enterprise allowing IBM Confidential projects.","tags":["ibm","code","collaboration","scm","private","git","version-control","planning"],"url":"https://otc-github-integrated-broker.ng.bluemix.net/github-broker/api","toolchain_binding":{"status":{"state":"configured"},"webhook_id":"23ead709e09e7038f305069d40a49445"}},{"broker_id":"12345678-9123-4567-8912-345678012githubintegrated","service_id":"github_integrated","container":{"guid":"fa4b93b183af4f3fbcdb6ee6c572d459","type":"resource_group_id"},"updated_at":"2020-04-07T15:39:28.870Z","parameters":{"extra_capabilities":[{"capability_id":"git.issues","display_name":"Issues","dashboard_url":"https://github.ibm.com/think2020/devops-checks-results/issues","label":"devops-checks-results","tags":["think","code"],"enabled":true,"readme":false}],"label":"devops-checks-results","type":"link","legal":true,"owner_id":"think2020","repo_name":"devops-checks-results","repo_url":"https://github.ibm.com/think2020/devops-checks-results.git","source_repo_url":"","private_repo":false,"has_issues":true,"enable_traceability":false,"integration_owner":"IBMid-310001UVD8","git_id":"integrated","api_root_url":"https://github.ibm.com/api","token_url":"https://otc-github-consolidated-broker.us-south.devops.cloud.ibm.com/github/token?git_id=integrated"},"status":{"state":"configured"},"dashboard_url":"https://github.ibm.com/think2020/devops-checks-results","region_id":"ibm:yp:us-south","instance_id":"b5f33fd7-cd28-4311-b389-6aa5aaf5f5fe","description":"Internal GitHub Enterprise allowing IBM Confidential projects.","tags":["ibm","code","collaboration","scm","private","git","version-control","planning"],"url":"https://otc-github-integrated-broker.ng.bluemix.net/github-broker/api","toolchain_binding":{"status":{"state":"configured"},"webhook_id":"61dcc8f50305687baf33edb4c5948f8f"}},{"broker_id":"12345678-9123-4567-8912-345678012pipeline","service_id":"pipeline","container":{"guid":"fa4b93b183af4f3fbcdb6ee6c572d459","type":"resource_group_id"},"updated_at":"2020-03-21T18:50:41.283Z","parameters":{"label":"Schematics Pipeline","type":"classic","services":["terraform-repo"],"name":"Schematics Pipeline","ui-pipeline":true,"configuration":{"content":"---\ndefaultBaseImageVersion: latest\nproperties:\n- name: API_KEY\n  value: ${API_KEY}\n  type: secure\n- name: WORKSPACE_ID\n  value: ${WORKSPACE_ID}\n  type: text\nstages:\n- name: UPDATE\n  inputs:\n  - type: git\n    branch: master\n    service: ${TERRAFORM_REPO}\n  triggers:\n  - type: commit\n  jobs:\n  - name: \"Update Workspace\"\n    type: builder\n    artifact_dir: ''\n    build_type: shell\n    script: |\n      #!/bin/bash\n      echo \"Workspace $WORKSPACE_ID\"\n\n      # force login (required by schematics cli)\n      ibmcloud login --apikey $API_KEY -a \"https://cloud.ibm.com\" --no-region\n\n      # get schematics workspace as json\n      WORKSPACE=$(ibmcloud terraform workspace get -i $WORKSPACE_ID --json)\n\n      # get rid of trailing \"OK\" if found\n      if [[ $WORKSPACE == *OK ]]; then\n        WORKSPACE=${WORKSPACE%??}\n      fi\n\n      echo \"Updating Schematics workspace from environment variables...\"\n\n      # iterate over ALL schematics worskpace variables to see if there is a matching env var\n      for KEY in $(echo $WORKSPACE | jq \".template_data[0].values_metadata[].name\" -r); do\n          \n          # if the value exists as an env var, update the workspace\n          if [ -n \"${!KEY}\" ]; then\n              echo \"$KEY found with value '${!KEY}'\"; \n              SEARCH=$(echo $WORKSPACE | jq \".template_data[0].variablestore[].name\")\n              \n              if [[ \"$SEARCH\" =~ .*\"$KEY\".* ]]; then\n                  #echo \"It's there, update it.\"\n                  WORKSPACE=$(echo $WORKSPACE | jq -r \\\n                      --arg updateKey \"$KEY\" \\\n                      --arg updateVal \"${!KEY}\" \\\n                      '.template_data[0].variablestore = [.template_data[0].variablestore[] | if (.name == $updateKey) then (.value = $updateVal) else . end]' )\n\n              else \n                  #echo \"It's NOT there, add it.\"\n                  WORKSPACE=$(echo $WORKSPACE | jq -r \".template_data[0].variablestore[.template_data[0].variablestore| length] |= . + { \\\"name\\\": \\\"$KEY\\\", \\\"value\\\": \\\"${!KEY}\\\", \\\"type\\\": \\\"string\\\" }\")\n                  \n              fi\n          fi\n      done\n\n      echo $WORKSPACE > workspace.json\n      ibmcloud terraform workspace update --id $WORKSPACE_ID --file workspace.json\n\n      # cleanup\n      rm -f workspace.json\n      unset WORKSPACE\n- name: PLAN\n  inputs:\n  - type: job\n    stage: UPDATE\n    job: \"Update Workspace\"\n  triggers:\n  - type: stage\n  jobs:\n  - name: \"Terraform Plan\"\n    type: builder\n    artifact_dir: ''\n    build_type: shell\n    script: |\n      #!/bin/bash\n\n      # force login (required by schematics cli)\n      ibmcloud login --apikey $API_KEY -a \"https://cloud.ibm.com\" --no-region\n      \n      # run terraform plan\n      echo \"ibmcloud terraform plan --id $WORKSPACE_ID\"\n      ACTIVITY=$(ibmcloud terraform plan -id $WORKSPACE_ID --json)\n\n      # get rid of trailing \"OK\" if found\n      if [[ $ACTIVITY == *OK ]]; then\n        ACTIVITY=${ACTIVITY%??}\n      fi\n\n      ACTIVITY_ID=$(echo $ACTIVITY | jq -r \".activityid\")\n      echo \"Activity ID   $ACTIVITY_ID\"\n\n      # poll until status is no longer INPROGRESS, or if there is an error\n      while :\n      do\n        STATUS=$(ibmcloud terraform workspace action --id $WORKSPACE_ID --act-id $ACTIVITY_ID --json)\n        \n        RET_VAL=$?\n        if [ $RET_VAL -ne 0 ]; then\n\n          echo $STATUS\n          exit $RET_VAL\n        else\n\n          # get rid of trailing \"OK\" if found\n          if [[ $STATUS == *OK ]]; then\n            STATUS=${STATUS%??}\n          fi\n          STATUS_VALUE=$(echo $STATUS | jq -r \".status\")\n          echo \"Polling for status: $STATUS_VALUE\"\n\n          if [ \"$STATUS_VALUE\" = \"FAILED\" ]; then \n            ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID\n            exit 1\n          elif [ \"$STATUS_VALUE\" != \"INPROGRESS\" ] && [ \"$STATUS_VALUE\" != \"CREATED\" ]; then  \n            break\n          fi\n        fi\n\n        # sleep for 5 seconds, while waiting for completion\n        sleep 5\n      done\n\n      ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID\n- name: APPLY\n  inputs:\n  - type: job\n    stage: PLAN\n    job: \"Terraform Plan\"\n  triggers:\n  - type: stage\n  jobs:\n  - name: \"Terraform Apply\"\n    type: builder\n    artifact_dir: ''\n    build_type: shell\n    script: |\n      #!/bin/bash\n\n      # force login (required by schematics cli)\n      ibmcloud login --apikey $API_KEY -a \"https://cloud.ibm.com\" --no-region\n\n      \n      # run terraform apply\n      echo \"ibmcloud terraform apply --id $WORKSPACE_ID --force\"\n      ACTIVITY=$(ibmcloud terraform apply -id $WORKSPACE_ID --json --force)\n\n      # get rid of trailing \"OK\" if found\n      if [[ $ACTIVITY == *OK ]]; then\n        ACTIVITY=${ACTIVITY%??}\n      fi\n\n      ACTIVITY_ID=$(echo $ACTIVITY | jq -r \".activityid\")\n      echo \"Activity ID   $ACTIVITY_ID\"\n\n      # poll until status is no longer INPROGRESS, or if there is an error\n      while :\n      do\n        STATUS=$(ibmcloud terraform workspace action --id $WORKSPACE_ID --act-id $ACTIVITY_ID --json)\n        \n        RET_VAL=$?\n        if [ $RET_VAL -ne 0 ]; then\n\n          echo $STATUS\n          exit $RET_VAL\n        else\n\n          # get rid of trailing \"OK\" if found\n          if [[ $STATUS == *OK ]]; then\n            STATUS=${STATUS%??}\n          fi\n          STATUS_VALUE=$(echo $STATUS | jq -r \".status\")\n          echo \"Polling for status: $STATUS_VALUE\"\n\n          if [ \"$STATUS_VALUE\" = \"FAILED\" ]; then\n            ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID\n            exit 1\n          elif [ \"$STATUS_VALUE\" != \"INPROGRESS\" ]; then  \n            break\n          fi\n        fi\n\n        # sleep for 5 seconds, while waiting for completion\n        sleep 5\n      done\n\n      ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID\n- name: TEST\n  inputs:\n  - type: job\n    stage: APPLY\n    job: \"Terraform Apply\"\n  triggers:\n  - type: stage\n  jobs:\n  - name: \"Check Health\"\n    type: builder\n    artifact_dir: ''\n    build_type: shell\n    script: |\n      #!/bin/bash\n\n      echo \"You can add tests here to ensure that your resources are healthy!\"\n\n\n\n\n","env":{"TERRAFORM_REPO":"terraform-repo","WORKSPACE_ID":"akmebank-infrastructure-97a98028-9d8e-49","API_KEY":"aL4ma9jgDOKmgxUyUNqzy9LwW3E8mc-InuVZtn5V4Duv"},"execute":true},"ui_pipeline":true,"api_url":"http://pipeline-service/pipeline/pipelines/843a3a9d-115a-411c-bd81-d6fa1ec643b6","external_api_url":"https://pipeline-service.us-south.devops.cloud.ibm.com/pipeline/pipelines/843a3a9d-115a-411c-bd81-d6fa1ec643b6"},"status":{"state":"configured"},"dashboard_url":"/devops/pipelines/843a3a9d-115a-411c-bd81-d6fa1ec643b6","region_id":"ibm:yp:us-south","instance_id":"843a3a9d-115a-411c-bd81-d6fa1ec643b6","description":"Automate your builds, deployments, and more.","tags":["ibm","deliver","build","deploy","pipeline","cicd"],"url":"https://otc-pipeline-broker.ng.bluemix.net/pipeline-broker/api","toolchain_binding":{"status":{"state":"configured"},"name":"terraform-apply","webhook_id":"0ad1623ebd32bfaf855a5e3c50535972"}},{"broker_id":"12345678-9123-4567-8912-345678012githubintegrated","service_id":"github_integrated","container":{"guid":"fa4b93b183af4f3fbcdb6ee6c572d459","type":"resource_group_id"},"updated_at":"2020-04-07T14:16:50.288Z","parameters":{"extra_capabilities":[{"capability_id":"git.issues","display_name":"Issues","dashboard_url":"https://github.ibm.com/one-pipeline/common-tekton-tasks/issues","label":"common-tekton-tasks","tags":["think","code"],"enabled":false,"readme":false}],"label":"common-tekton-tasks","type":"link","legal":true,"owner_id":"one-pipeline","repo_name":"common-tekton-tasks","repo_url":"https://github.ibm.com/one-pipeline/common-tekton-tasks.git","source_repo_url":"","private_repo":false,"has_issues":false,"enable_traceability":false,"integration_owner":"IBMid-310001UVD8","git_id":"integrated","api_root_url":"https://github.ibm.com/api","token_url":"https://otc-github-consolidated-broker.us-south.devops.cloud.ibm.com/github/token?git_id=integrated"},"status":{"state":"configured"},"dashboard_url":"https://github.ibm.com/one-pipeline/common-tekton-tasks","region_id":"ibm:yp:us-south","instance_id":"98f0b975-7d1c-4aaa-9a32-ebc297af409e","description":"Internal GitHub Enterprise allowing IBM Confidential projects.","tags":["ibm","code","collaboration","scm","private","git","version-control","planning"],"url":"https://otc-github-integrated-broker.ng.bluemix.net/github-broker/api","toolchain_binding":{"status":{"state":"configured"},"webhook_id":"0aeeb61003c955ba8899c75dfcf1be9b"}},{"broker_id":"12345678-9123-4567-8912-345678012pipeline","service_id":"pipeline","container":{"guid":"fa4b93b183af4f3fbcdb6ee6c572d459","type":"resource_group_id"},"updated_at":"2020-03-21T19:25:04.555Z","parameters":{"label":"infrastructure-compliance","type":"tekton","name":"infrastructure-compliance","ui_pipeline":true},"status":{"state":"configured"},"dashboard_url":"/devops/pipelines/tekton/a91cb7fa-aed0-42af-91df-3d5ffaf06357","region_id":"ibm:yp:us-south","instance_id":"a91cb7fa-aed0-42af-91df-3d5ffaf06357","description":"Automate your builds, deployments, and more.","tags":["ibm","deliver","build","deploy","pipeline","cicd"],"url":"https://otc-pipeline-broker.ng.bluemix.net/pipeline-broker/api","toolchain_binding":{"status":{"state":"configured"},"webhook_id":"0ad1623ebd32bfaf855a5e3c5064bbab"}},{"broker_id":"12345678-9123-4567-8912-345678012githubintegrated","service_id":"github_integrated","container":{"guid":"fa4b93b183af4f3fbcdb6ee6c572d459","type":"resource_group_id"},"updated_at":"2020-03-21T18:50:41.824Z","parameters":{"extra_capabilities":[{"capability_id":"git.issues","display_name":"Issues","dashboard_url":"https://github.ibm.com/think2020/terraform-ca/issues","label":"terraform-ca","tags":["think","code"],"enabled":false,"readme":false}],"label":"terraform-ca","type":"link","repo_name":"terraform-ca","repo_url":"https://github.ibm.com/think2020/terraform-ca.git","source_repo_url":"https://github.com/Cloud-Schematics/cluster","has_issues":false,"enable_traceability":true,"legal_label":"","legal":true,"namespace_table":"","owner_id":"think2020","private_repo":false,"integration_owner":"IBMid-100000KRAY","git_id":"integrated","api_root_url":"https://github.ibm.com/api","token_url":"https://otc-github-consolidated-broker.us-south.devops.cloud.ibm.com/github/token?git_id=integrated"},"status":{"state":"configured"},"dashboard_url":"https://github.ibm.com/think2020/terraform-ca","region_id":"ibm:yp:us-south","instance_id":"d87c5c80-94b0-4b97-a03f-8a58207b2906","description":"Internal GitHub Enterprise allowing IBM Confidential projects.","tags":["ibm","code","collaboration","scm","private","git","version-control","planning"],"url":"https://otc-github-integrated-broker.ng.bluemix.net/github-broker/api","toolchain_binding":{"status":{"state":"configured"},"name":"terraform-repo","webhook_id":"510fa1508286dca503c80f9e534a50cb"}}]}
    - apiVersion: v1
      kind: Secret
      metadata:
        name: cd-secret
      type: Opaque
      stringData:
        API_KEY: $(params.apikey)
    - apiVersion: tekton.dev/v1alpha1
      kind: PipelineRun
      metadata:
        name: pipelinerun-$(uid)
      spec:
        pipelineRef:
            name: pipeline
        params:
        - name: another-pipeline-id
          value: $(params.another-pipeline-id)
        - name: manual-trigger
          value: $(params.manual-trigger)
        - name: repository
          value: $(params.repository)
        - name: toolchain-id
          value: $(params.toolchain-id)
        - name: myzzz
          value: $(params.myzzz)
---
apiVersion: tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: binding
spec:
  params:
    - name: another-pipeline-id
      description: the pipeline Id of another tekton pipeline to trigger
      value: $(event.another-pipeline-id)
    - name: manual-trigger
      description: manual trigger name of another tekton pipeline
      value: $(event.manual-trigger)
    - name: apikey
      description: the ibmcloud api key
      value: $(event.apikey)
    - name: repository  # repository doesn't have to be in TriggerTemplate.params, but it has to be in resourcetemplates.PipelineRun.params
      value: $(event.repository)
    - name: toolchain-id
      value: $(event.toolchain-id)
---
apiVersion: tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: triggerAnotherTekton-listener
spec:
  triggers:
    - binding:
        name: binding
      template:
        name: template
